"""
Streamlit UI for Thai RAG Chatbot
‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RAG Chatbot ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
"""

import streamlit as st
import os
import tempfile
from typing import List, Dict, Any
from pathlib import Path
import time

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
import sys
sys.path.append('./src')

from document_processor import ThaiDocumentProcessor
from vector_store import ThaiVectorStoreManager, RECOMMENDED_THAI_MODELS
from rag_system import ThaiRAGSystem, RECOMMENDED_THAI_LLM_MODELS


# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="Thai RAG Chatbot",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #ffffff;
        text-align: center;
        padding: 1rem 0;
        border-bottom: 2px solid #444444;
        margin-bottom: 2rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 10px;
    }
    
    .chat-container {
        background-color: #2d3748;
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
    }
    
    .chat-message {
        padding: 1.2rem;
        border-radius: 15px;
        margin: 1rem 0;
        max-width: 85%;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        line-height: 1.6;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .user-message {
        background: linear-gradient(135deg, #ff6b6b, #ee5a52);
        color: white;
        margin-left: auto;
        position: relative;
    }
    
    .user-message::before {
        content: "üë§";
        position: absolute;
        left: -2.5rem;
        top: 0.5rem;
        background-color: #ff6b6b;
        border-radius: 50%;
        width: 2rem;
        height: 2rem;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
    }
    
    .bot-message {
        background: linear-gradient(135deg, #ffd93d, #ff9500);
        color: #2d3748;
        margin-right: auto;
        position: relative;
    }
    
    .bot-message::before {
        content: "ü§ñ";
        position: absolute;
        left: -2.5rem;
        top: 0.5rem;
        background-color: #ffd93d;
        border-radius: 50%;
        width: 2rem;
        height: 2rem;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
    }
    
    .message-content {
        margin-left: 0.5rem;
        font-weight: 500;
    }
    
    .source-card {
        background: linear-gradient(135deg, #4facfe, #00f2fe);
        color: white;
        padding: 1rem;
        border-radius: 12px;
        margin: 0.8rem 0;
        font-size: 0.9rem;
        box-shadow: 0 3px 10px rgba(79, 172, 254, 0.3);
    }
    
    /* ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á expander */
    .streamlit-expander {
        background-color: #2d3748 !important;
        border: 1px solid #4a5568 !important;
        border-radius: 10px !important;
        margin: 0.5rem 0 !important;
    }
    
    .streamlit-expander > div > div > div > div > p {
        color: #e2e8f0 !important;
        font-weight: 500 !important;
        margin: 0 !important;
    }
    
    .streamlit-expander[data-testid="stExpander"][aria-expanded="true"] {
        background-color: #2d3748 !important;
    }
    
    /* ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ expander */
    details summary {
        background-color: #4a5568 !important;
        color: #e2e8f0 !important;
        padding: 0.8rem !important;
        border-radius: 8px !important;
        cursor: pointer !important;
        font-weight: 500 !important;
    }
    
    details summary:hover {
        background-color: #5a6578 !important;
    }
    
    details[open] summary {
        border-bottom-left-radius: 0 !important;
        border-bottom-right-radius: 0 !important;
        border-bottom: 1px solid #4a5568 !important;
    }
    
    .stats-card {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        padding: 1.2rem;
        border-radius: 12px;
        margin: 0.8rem 0;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }
    
    .chat-input {
        background-color: #4a5568;
        border: 2px solid #718096;
        border-radius: 25px;
        color: white;
        padding: 0.8rem 1.5rem;
    }
    
    .chat-input::placeholder {
        color: #a0aec0;
    }
    
    /* Dark theme ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö chat container */
    .stChatInputContainer {
        background-color: #2d3748;
        border-radius: 15px;
        padding: 1rem;
    }
    
    .chat-input-container {
        background-color: #2d3748;
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        border: 1px solid #4a5568;
    }
    
    /* ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á text area */
    .stTextArea > div > div > textarea {
        background-color: #4a5568 !important;
        color: white !important;
        border: 2px solid #718096 !important;
        border-radius: 10px !important;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif !important;
    }
    
    .stTextArea > div > div > textarea::placeholder {
        color: #a0aec0 !important;
    }
    
    /* ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° */
    .stButton > button {
        border-radius: 20px !important;
        font-weight: 600 !important;
        transition: all 0.3s ease !important;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
    }
</style>
""", unsafe_allow_html=True)


def initialize_session_state():
    """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö session state"""
    if 'document_processor' not in st.session_state:
        st.session_state.document_processor = None  # ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤
    
    if 'vector_store_manager' not in st.session_state:
        st.session_state.vector_store_manager = None
    
    if 'rag_system' not in st.session_state:
        st.session_state.rag_system = None
    
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    
    if 'processed_files' not in st.session_state:
        st.session_state.processed_files = []
    
    if 'system_ready' not in st.session_state:
        st.session_state.system_ready = False


def clean_html_content(text: str) -> str:
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å HTML tags ‡πÅ‡∏•‡∏∞ entities"""
    if not text:
        return ""
    
    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà HTML tags
    text = text.replace('<', '&lt;').replace('>', '&gt;')
    
    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà HTML entities ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    text = text.replace('&', '&amp;')
    text = text.replace('"', '&quot;')
    text = text.replace("'", '&#x27;')
    
    # ‡∏•‡∏ö HTML tags ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏£‡∏±‡πà‡∏ß‡∏°‡∏≤
    import re
    text = re.sub(r'<[^>]+>', '', text)
    
    return text.strip()


def setup_sidebar():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Sidebar"""
    st.sidebar.title("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    
    # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•
    st.sidebar.subheader("ü§ñ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Embedding Model
    embedding_model = st.sidebar.selectbox(
        "Embedding Model",
        options=list(RECOMMENDED_THAI_MODELS.keys()),
        format_func=lambda x: f"{x}: {RECOMMENDED_THAI_MODELS[x].split('/')[-1]}",
        help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings"
    )
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å LLM Model
    llm_model = st.sidebar.selectbox(
        "LLM Model (Ollama)",
        options=list(RECOMMENDED_THAI_LLM_MODELS.keys()),
        format_func=lambda x: f"{x}: {RECOMMENDED_THAI_LLM_MODELS[x]}",
        help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• LLM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"
    )
    
    # ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
    temperature = st.sidebar.slider(
        "Temperature",
        min_value=0.0,
        max_value=1.0,
        value=0.1,
        step=0.1,
        help="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö (0 = ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö, 1 = ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå)"
    )
    
    max_tokens = st.sidebar.slider(
        "Max Tokens",
        min_value=512,
        max_value=4096,
        value=2048,
        step=256,
        help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö"
    )
    
    st.sidebar.divider()
    
    # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    st.sidebar.subheader("üìÑ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")
    
    st.sidebar.markdown("""
    **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:**
    - **Chunk Size ‡πÄ‡∏•‡πá‡∏Å (200-500)**: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
    - **Chunk Size ‡∏Å‡∏•‡∏≤‡∏á (800-1200)**: ‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏ö‡∏ó
    - **Chunk Size ‡πÉ‡∏´‡∏ç‡πà (1500-2000)**: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏°‡∏≤‡∏Å
    """)
    
    chunk_size = st.sidebar.slider(
        "Chunk Size (‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô)",
        min_value=200,
        max_value=2000,
        value=1000,
        step=100,
        help="‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (characters) - ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏ç‡πà = ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô"
    )
    
    chunk_overlap = st.sidebar.slider(
        "Chunk Overlap (‡∏™‡πà‡∏ß‡∏ô‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö)",
        min_value=0,
        max_value=min(500, chunk_size//2),
        value=min(200, chunk_size//5),
        step=50,
        help="‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (characters) - ‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"
    )
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô chunks ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    if chunk_size > 0:
        estimated_chunks_per_1000_chars = max(1, int(1000 / (chunk_size - chunk_overlap)))
        st.sidebar.caption(f"‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {estimated_chunks_per_1000_chars} chunks ‡∏ï‡πà‡∏≠ 1,000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
    if st.sidebar.button("üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö"):
        setup_system(embedding_model, llm_model, temperature, max_tokens, chunk_size, chunk_overlap)
    
    st.sidebar.divider()
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö
    display_system_stats()
    
    st.sidebar.divider()
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    if st.sidebar.button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
        clear_all_data()
    
    if st.sidebar.button("üí¨ ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"):
        clear_chat_history()


def setup_system(embedding_model: str, llm_model: str, temperature: float, max_tokens: int, chunk_size: int, chunk_overlap: int):
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö"""
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö..."):
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Document Processor ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            st.session_state.document_processor = ThaiDocumentProcessor(
                chunk_size=chunk_size,
                chunk_overlap=chunk_overlap
            )
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Store Manager
            st.session_state.vector_store_manager = ThaiVectorStoreManager(
                embedding_model=RECOMMENDED_THAI_MODELS[embedding_model],
                vector_store_path="./vectorstore"
            )
            
            # ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î vector store ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            if st.session_state.vector_store_manager.load_vector_store():
                st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î vector store ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á RAG System
            st.session_state.rag_system = ThaiRAGSystem(
                vector_store_manager=st.session_state.vector_store_manager,
                llm_model=RECOMMENDED_THAI_LLM_MODELS[llm_model],
                temperature=temperature,
                max_tokens=max_tokens
            )
            
            st.session_state.system_ready = True
            st.success("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            
        except Exception as e:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö: {str(e)}")


def display_system_stats():
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö"""
    st.sidebar.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á chunk settings
    if st.session_state.document_processor:
        st.sidebar.info(f"""
        **‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:**
        - Chunk Size: {st.session_state.document_processor.chunk_size} characters
        - Chunk Overlap: {st.session_state.document_processor.chunk_overlap} characters
        """)
    
    if st.session_state.rag_system:
        stats = st.session_state.rag_system.get_system_stats()
        
        st.sidebar.metric(
            "‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", 
            stats['vector_store'].get('total_documents', 0)
        )
        
        st.sidebar.metric(
            "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤", 
            stats.get('chat_history_length', 0)
        )
        
        st.sidebar.markdown(f"**‡πÇ‡∏°‡πÄ‡∏î‡∏• LLM:** {stats.get('llm_model', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö')}")
        st.sidebar.markdown(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** {'‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' if stats.get('rag_chain_ready', False) else '‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°'}")
    else:
        st.sidebar.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô")


def upload_documents():
    """‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"""
    st.subheader("üìÅ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if not st.session_state.system_ready or not st.session_state.document_processor:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Chunk Size, Chunk Overlap ‡πÉ‡∏ô Sidebar ‡∏Å‡πà‡∏≠‡∏ô")
        return
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    st.info(f"""
    **‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:**
    - Chunk Size: {st.session_state.document_processor.chunk_size} characters
    - Chunk Overlap: {st.session_state.document_processor.chunk_overlap} characters
    """)
    
    uploaded_files = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
        type=['txt', 'pdf', 'docx', 'doc', 'pptx'],
        accept_multiple_files=True,
        help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .txt, .pdf, .docx, .pptx"
    )
    
    if uploaded_files and st.button("üì§ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"):
        process_uploaded_files(uploaded_files)


def process_uploaded_files(uploaded_files):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î"""
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    all_documents = []
    processed_count = 0
    
    for i, uploaded_file in enumerate(uploaded_files):
        try:
            status_text.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {uploaded_file.name}")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            with tempfile.NamedTemporaryFile(delete=False, suffix=Path(uploaded_file.name).suffix) as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_path = tmp_file.name
            
            # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
            documents = st.session_state.document_processor.process_document(
                tmp_path,
                metadata={"uploaded_filename": uploaded_file.name}
            )
            
            all_documents.extend(documents)
            processed_count += 1
            
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            os.unlink(tmp_path)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress
            progress_bar.progress((i + 1) / len(uploaded_files))
            
            st.session_state.processed_files.append({
                "filename": uploaded_file.name,
                "chunks": len(documents),
                "size": uploaded_file.size
            })
            
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {uploaded_file.name}: {str(e)}")
    
    if all_documents:
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏•‡∏á‡πÉ‡∏ô vector store
        status_text.text("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á vector store...")
        st.session_state.vector_store_manager.add_documents(all_documents)
        st.session_state.vector_store_manager.save_vector_store()
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó RAG system
        st.session_state.rag_system.update_vector_store(st.session_state.vector_store_manager)
        
        status_text.empty()
        progress_bar.empty()
        
        st.success(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {processed_count} ‡πÑ‡∏ü‡∏•‡πå, {len(all_documents)} chunks")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        with st.expander("üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"):
            for file_info in st.session_state.processed_files[-processed_count:]:
                st.markdown(f"**{file_info['filename']}** - {file_info['chunks']} chunks, {file_info['size']} bytes")


def chat_interface():
    """‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"""
    st.subheader("üí¨ ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")
    
    if not st.session_state.system_ready:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô")
        return
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏ô chat container ‡∏™‡∏ß‡∏¢‡πÜ
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    
    for chat in st.session_state.chat_history:
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        st.markdown(f"""
        <div class="chat-message user-message">
            <div class="message-content">
                <strong>‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:</strong><br>
                {chat['question']}
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏ó
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å HTML tags
        clean_answer = clean_html_content(chat['answer'])
        st.markdown(f"""
        <div class="chat-message bot-message">
            <div class="message-content">
                <strong>‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:</strong><br>
                {clean_answer}
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÉ‡∏ô expander
        if 'sources' in chat and chat['sources']:
            with st.expander(f"üìö ‡∏î‡∏π‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ({len(chat['sources'])} ‡πÅ‡∏´‡∏•‡πà‡∏á)", expanded=False):
                for i, source in enumerate(chat['sources'], 1):
                    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å HTML tags
                    clean_content = clean_html_content(source['content'])
                    filename = source.get('filename', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå')
                    chunk_index = source.get('chunk_index', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö')
                    
                    st.markdown(f"""
                    <div class="source-card">
                        <strong>üìÑ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤ {i}:</strong> {filename} (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà {chunk_index})<br>
                        <div style="margin-top: 0.5rem; font-style: italic;">
                            {clean_content[:300]}{'...' if len(clean_content) > 300 else ''}
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ‡∏ä‡πà‡∏≠‡∏á‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡∏ß‡∏¢‡πÜ
    st.markdown('<div class="chat-input-container">', unsafe_allow_html=True)
    st.divider()
    
    with st.form("question_form", clear_on_submit=True):
        question = st.text_area(
            "üí≠ ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:",
            placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà... ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£? ‡∏´‡∏£‡∏∑‡∏≠ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á?",
            height=80,
            key="question_input"
        )
        
        col1, col2, col3 = st.columns([1, 1, 3])
        with col1:
            submit_button = st.form_submit_button("üöÄ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", use_container_width=True, type="primary")
        with col2:
            if st.form_submit_button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", use_container_width=True):
                st.rerun()
        with col3:
            if st.form_submit_button("üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", use_container_width=True):
                st.info("""
                **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ:**
                - ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£?
                - ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
                - ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö [‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠] ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
                - ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ [‡∏ó‡∏≥‡∏™‡∏¥‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô] ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
                """)
        
        if submit_button and question.strip():
            ask_question(question.strip())
    
    st.markdown('</div>', unsafe_allow_html=True)


def ask_question(question: str):
    """‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
    with st.spinner("ü§î ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î..."):
        result = st.session_state.rag_system.ask_question(question)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
        st.session_state.chat_history.append(result)
        
        # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
        st.rerun()


def clear_chat_history():
    """‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"""
    st.session_state.chat_history = []
    if st.session_state.rag_system:
        st.session_state.rag_system.clear_chat_history()
    st.success("‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")


def clear_all_data():
    """‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    st.session_state.chat_history = []
    st.session_state.processed_files = []
    st.session_state.system_ready = False
    
    if st.session_state.vector_store_manager:
        st.session_state.vector_store_manager.clear_vector_store()
    
    st.session_state.vector_store_manager = None
    st.session_state.rag_system = None
    
    st.success("‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    # Header
    st.markdown('<h1 class="main-header">ü§ñ Thai RAG Chatbot</h1>', unsafe_allow_html=True)
    st.markdown("""
    <div style="text-align: center; margin-bottom: 2rem; color: #666;">
        ‡∏£‡∏∞‡∏ö‡∏ö RAG Chatbot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ | ‡πÉ‡∏ä‡πâ Local LLM ‡πÅ‡∏•‡∏∞ Embedding Models
    </div>
    """, unsafe_allow_html=True)
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    initialize_session_state()
    
    # Sidebar
    setup_sidebar()
    
    # ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å
    tab1, tab2, tab3 = st.tabs(["üìÅ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£", "üí¨ ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤", "‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö"])
    
    with tab1:
        upload_documents()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        if st.session_state.processed_files:
            st.subheader("üìã ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß")
            for file_info in st.session_state.processed_files:
                st.markdown(f"- **{file_info['filename']}** ({file_info['chunks']} chunks)")
    
    with tab2:
        chat_interface()
    
    with tab3:
        display_system_info()


def display_system_info():
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö"""
    st.subheader("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
    
    if st.session_state.rag_system:
        stats = st.session_state.rag_system.get_system_stats()
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üóÉÔ∏è Vector Store")
            st.json(stats['vector_store'])
        
        with col2:
            st.markdown("### ü§ñ LLM")
            st.markdown(f"**‡πÇ‡∏°‡πÄ‡∏î‡∏•:** {stats['llm_model']}")
            st.markdown(f"**‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤:** {stats['chat_history_length']} ‡∏£‡∏≠‡∏ö")
            st.markdown(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ RAG:** {'‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°' if stats['rag_chain_ready'] else '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°'}")
    
    st.divider()
    
    # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    st.subheader("üìñ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    
    with st.expander("üöÄ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
        st.markdown("""
        1. **‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö**: ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Sidebar ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö"
        2. **‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£**: ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö "‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£" ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        3. **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏ó‡∏ô‡∏≤**: ‡πÑ‡∏õ‡πÅ‡∏ó‡πá‡∏ö "‡∏™‡∏ô‡∏ó‡∏ô‡∏≤" ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        """)
    
    with st.expander("üõ†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Ollama"):
        st.markdown("""
        **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows:**
        ```bash
        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Ollama ‡∏à‡∏≤‡∏Å https://ollama.ai
        # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:
        ollama serve
        
        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•:
        ollama pull llama3.1:8b
        ```
        
        **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö macOS/Linux:**
        ```bash
        curl https://ollama.ai/install.sh | sh
        ollama serve
        ollama pull llama3.1:8b
        ```
        """)
    
    with st.expander("üìù ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"):
        st.markdown("""
        **Embedding Models:**
        - **Fast**: paraphrase-multilingual-MiniLM-L12-v2 (‡πÄ‡∏£‡πá‡∏ß, RAM ‡∏ô‡πâ‡∏≠‡∏¢)
        - **Balanced**: distiluse-base-multilingual-cased (‡∏™‡∏°‡∏î‡∏∏‡∏•)
        - **Best**: paraphrase-multilingual-mpnet-base-v2 (‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
        
        **LLM Models:**
        - **Small**: llama3.1:8b (8GB RAM)
        - **Balanced**: llama3.1:70b (80GB RAM)
        - **Coding**: codellama:7b (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î)
        """)


if __name__ == "__main__":
    main()