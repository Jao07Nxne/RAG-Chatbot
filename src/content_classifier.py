"""
Content Classifier for Dynamic Chunking Strategy
‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å chunking strategy ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
"""

import re
from typing import Literal

ContentType = Literal["general", "curriculum_table", "course_description", "appendix"]


class ContentClassifier:
    """‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å chunking strategy"""
    
    @staticmethod
    def classify(text: str, page_num: int = None) -> ContentType:
        """
        ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        
        Args:
            text: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å
            page_num: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ (optional)
        
        Returns:
            ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: general, curriculum_table, course_description, appendix
        """
        
        # üî• 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Curriculum Table ‡∏Å‡πà‡∏≠‡∏ô (‡∏°‡∏µ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î!)
        # ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô appendix ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏†‡∏≤‡∏Ñ‡∏ú‡∏ô‡∏ß‡∏Å" ‡∏î‡πâ‡∏ß‡∏¢
        if ContentClassifier._is_curriculum_table(text):
            return "curriculum_table"
        
        # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Course Description
        if ContentClassifier._is_course_description(text):
            return "course_description"
        
        # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Appendix (‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
        if ContentClassifier._is_appendix(text, page_num):
            return "appendix"
        
        # 4. Default: General content
        return "general"
    
    @staticmethod
    def _is_curriculum_table(text: str) -> bool:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        
        ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç:
        - ‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ "‡∏õ‡∏µ‡∏ó‡∏µ‡πà X ‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà Y" (‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô)
        - ‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤ 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
        - ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï"
        - ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "‡∏£‡∏ß‡∏° XX ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï"
        """
        # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 1: ‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ "‡∏õ‡∏µ‡∏ó‡∏µ‡πà X" ‡πÅ‡∏•‡∏∞ "‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà Y" (‡πÅ‡∏¢‡∏Å‡πÄ‡∏ä‡πá‡∏Ñ - ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Å‡∏ß‡πà‡∏≤)
        has_year = bool(re.search(
            r'‡∏õ‡∏µ\s*‡∏ó‡∏µ‡πà\s*\d+|‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ\s*\d+', 
            text,
            re.IGNORECASE
        ))
        
        has_semester = bool(re.search(
            r'‡∏†‡∏≤‡∏Ñ\s*‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤\s*‡∏ó‡∏µ‡πà\s*\d+|‡∏†‡∏≤‡∏Ñ\s*\d+|‡πÄ‡∏ó‡∏≠‡∏°\s*\d+',
            text,
            re.IGNORECASE
        ))
        
        has_year_semester = has_year and has_semester
        
        # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 2: ‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤ 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ (8 ‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô 05506232)
        course_codes = re.findall(r'\b\d{8}\b', text)
        has_multiple_courses = len(course_codes) >= 3
        
        # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 3: ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï"
        has_credits = '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï' in text
        
        # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 4: ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "‡∏£‡∏ß‡∏° XX ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï"
        has_total = bool(re.search(r'‡∏£‡∏ß‡∏°\s+\d+\s+‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï', text))
        
        # üî• ‡∏•‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2/4 ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç (‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤!)
        score = sum([
            has_year_semester,
            has_multiple_courses,
            has_credits,
            has_total
        ])
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤ 3+ ‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï ‚Üí ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á!
        is_table = (score >= 2 and has_multiple_courses) or score >= 3
        
        if is_table:
            print(f"   ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {score}/4, ‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤ {len(course_codes)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")
        
        return is_table
    
    @staticmethod
    def _is_course_description(text: str) -> bool:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        
        ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç:
        - ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤ 8 ‡∏´‡∏•‡∏±‡∏Å
        - ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤"
        - ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö
        """
        # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 1: ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤ 8 ‡∏´‡∏•‡∏±‡∏Å
        starts_with_code = bool(re.match(r'^\s*\d{8}\s+', text))
        
        # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 2: ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤"
        has_objective = '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå' in text or '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤' in text or '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤' in text[:200]
        
        # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 3: ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö
        has_english_name = bool(re.search(r'\([A-Z][a-zA-Z\s]+\)', text[:300]))
        
        is_course = starts_with_code and (has_objective or has_english_name)
        
        if is_course:
            # ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á
            code_match = re.match(r'^\s*(\d{8})\s+', text)
            code = code_match.group(1) if code_match else "unknown"
            print(f"   ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ (‡∏£‡∏´‡∏±‡∏™ {code})")
        
        return is_course
    
    @staticmethod
    def _is_appendix(text: str, page_num: int = None) -> bool:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏Ñ‡∏ú‡∏ô‡∏ß‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        
        ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç:
        - ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏†‡∏≤‡∏Ñ‡∏ú‡∏ô‡∏ß‡∏Å" ‡∏´‡∏£‡∏∑‡∏≠ "Appendix"
        - ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£" ‡∏´‡∏£‡∏∑‡∏≠ "Curriculum Map"
        - ‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 45 (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ page_num)
        - **‡πÅ‡∏ï‡πà‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤ 3+ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£** (‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
        """
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏¢‡∏≠‡∏∞‡πÑ‡∏´‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ = ‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà appendix)
        course_codes = re.findall(r'\b\d{8}\b', text)
        if len(course_codes) >= 3:
            # ‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏¢‡∏≠‡∏∞ ‚Üí ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà appendix
            return False
        
        # ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        has_appendix_keyword = bool(re.search(
            r'‡∏†‡∏≤‡∏Ñ‡∏ú‡∏ô‡∏ß‡∏Å|Appendix|‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£|Curriculum\s+Map|‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á|‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå',
            text,
            re.IGNORECASE
        ))
        
        # ‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 45 (‡∏™‡∏±‡∏ô‡∏ô‡∏¥‡∏©‡∏ê‡∏≤‡∏ô)
        is_late_page = page_num and page_num > 45
        
        is_appendix = has_appendix_keyword or is_late_page
        
        if is_appendix:
            print(f"   ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏†‡∏≤‡∏Ñ‡∏ú‡∏ô‡∏ß‡∏Å (‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤: {len(course_codes)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")
        
        return is_appendix
    
    @staticmethod
    def get_strategy_info(content_type: ContentType) -> dict:
        """
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• strategy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        
        Returns:
            dict with chunk_size, chunk_overlap, description
        """
        strategies = {
            "general": {
                "chunk_size": 1000,
                "chunk_overlap": 200,
                "description": "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°, ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢)"
            },
            "curriculum_table": {
                "chunk_size": 3000,
                "chunk_overlap": 500,
                "description": "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ (‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô, ‡πÑ‡∏°‡πà‡∏ï‡∏±‡∏î)"
            },
            "course_description": {
                "chunk_size": 1500,
                "chunk_overlap": 300,
                "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ (1 chunk = 1 ‡∏ß‡∏¥‡∏ä‡∏≤)"
            },
            "appendix": {
                "chunk_size": 800,
                "chunk_overlap": 150,
                "description": "‡∏†‡∏≤‡∏Ñ‡∏ú‡∏ô‡∏ß‡∏Å (‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î)"
            }
        }
        
        return strategies.get(content_type, strategies["general"])
